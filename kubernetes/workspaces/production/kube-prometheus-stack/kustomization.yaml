resources:
  - ./namespace.yaml

helmCharts:

  - repo: https://prometheus-community.github.io/helm-charts
    name: prometheus-operator-crds
    releaseName: prometheus-operator-crds
    namespace: prometheus
    version: 6.0.0

  - repo: https://prometheus-community.github.io/helm-charts
    name: kube-prometheus-stack
    version: 52.0.0
    releaseName: kube-prometheus-stack
    namespace: prometheus
    valuesInline:

      crds:
        enabled: false

      prometheus:
        prometheusSpec:

          ## If true, a nil or {} value for prometheus.prometheusSpec.podMonitorSelector will cause
          ## the prometheus resource to be created with selectors based on values in the helm
          ## deployment, which will also match the podmonitors created.
          podMonitorSelectorNilUsesHelmValues: false

          ## If true, a nil or {} value for prometheus.prometheusSpec.serviceMonitorSelector will
          ## cause the prometheus resource to be created with selectors based on values in the helm
          ## deployment, which will also match the servicemonitors created.
          serviceMonitorSelectorNilUsesHelmValues: false

          storageSpec:
            volumeClaimTemplate:
              spec:
                resources:
                  requests:
                    storage: 1Gi
                accessModes: [ ReadWriteOnce ]

          scrapeConfig:
            matchLabels:
              prometheus: scrape-configs

          ## AdditionalScrapeConfigs allows specifying additional Prometheus scrape configurations.
          ## Scrape configurations are appended to the configurations generated by the Prometheus
          ## Operator. Job configurations must have the form as specified in the official Prometheus
          ## documentation:
          ## https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config.
          additionalScrapeConfigs:
            ## Istiod.
            - job_name: 'istiod'
              scheme: https
              tls_config:
                ca_file: /etc/prom-certs/root-cert.pem
                cert_file: /etc/prom-certs/cert-chain.pem
                key_file: /etc/prom-certs/key.pem
                insecure_skip_verify: true ## Prometheus does not support Istio security naming, thus skip verifying target pod certificate.
              kubernetes_sd_configs:
                - role: endpoints
                  namespaces:
                    names:
                      - istio-system
              relabel_configs:
                - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                  action: keep
                  regex: istiod;http-monitoring
            ## Envoy stats, including sidecar proxies and gateway proxies.
            - job_name: 'envoy-stats'
              scheme: https
              tls_config:
                ca_file: /etc/prom-certs/root-cert.pem
                cert_file: /etc/prom-certs/cert-chain.pem
                key_file: /etc/prom-certs/key.pem
                insecure_skip_verify: true
              metrics_path: /stats/prometheus
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels: [__meta_kubernetes_pod_container_port_name]
                  action: keep
                  regex: '.*-envoy-prom'

        ## The control plane, gateway, and Envoy sidecar metrics will all be scraped over cleartext.
        ## However, the application metrics will follow whatever Istio authentication policy has
        ## been configured for the workload. If you use STRICT mode, then Prometheus will need to be
        ## configured to scrape using Istio certificates.
        ##
        ## One way to provision Istio certificates for Prometheus is by injecting a sidecar which
        ## will rotate SDS certificates and output them to a volume that can be shared with
        ## Prometheus. However, the sidecar should not intercept requests for Prometheus because
        ## Prometheus’s model of direct endpoint access is incompatible with Istio’s sidecar proxy
        ## model.
          volumes:
            - emptyDir:
                medium: Memory
              name: istio-certs
          volumeMounts:
            - mountPath: /etc/prom-certs/
              name: istio-certs
        annotations:

          ## Teling Istio not to intercept any inbound ports.
          traffic.sidecar.istio.io/includeInboundPorts: ""

          ## Teling Istio not to intercept any outbound traffic.
          traffic.sidecar.istio.io/includeOutboundIPRanges: ""

          ## Configure an env variable `OUTPUT_CERTS` to write certificates to the given folder.
          proxy.istio.io/config: |
            proxyMetadata:
              OUTPUT_CERTS: /etc/istio-output-certs

          ## Mount the shared volume at sidecar proxy.
          sidecar.istio.io/userVolumeMount: '[{"name": "istio-certs", "mountPath": "/etc/istio-output-certs"}]'

      grafana:
        ## A sidecar container is deployed in the grafana pod. This container watches all configmaps
        ## (or secrets) in the cluster and filters out the ones with a label 'grafana_dashboard='1''.
        sidecar:
          dashboards:
            enabled: true
            label: grafana_dashboard
            searchNamespace: ALL