resources:
  - ./namespace.yaml
  - ./falcosidekick-config.sealed-secret.yaml

helmCharts:

  ## Falco is a Cloud Native Runtime Security tool designed to detect anomalous activity in your
  ## applications. You can use Falco to monitor runtime security of your Kubernetes applications
  ## and internal components.
  - repo: https://falcosecurity.github.io/charts
    name: falco
    version: 3.8.4
    namespace: falco
    releaseName: falco
    valuesInline:

      ## Falco needs a driver to analyze the system workload and pass security events to userspace.
      ## We will be using modern eBPF probes.
      driver:
        kind: modern-bpf

      ## Each of the enabled event sources causes Falco to start a new ad-hoc isolated thread
      ## through which events for a single source are generated, consumed, and evaluated through
      ## security rules. In each isolated thread, events are still processed sequentially one-by-one.
      ## Read more about how are Kernel events collected - https://falco.org/docs/event-sources/kernel/architecture/.

      ## Falco uses collectors to gather information from different sources in order to enrich its
      ## events. (e.g. - Kubernetes collector, ContainerD collector, process collector etc.)
      ## Collectors provide additional context that can be used in Falco rules.
      collectors:
        ## DigitalOcean uses ContainerD as their container runtime. So I am disabling support for
        ## the other container runtimes.
        docker:
          enabled: false
        crio:
          enabled: false

      falco:
        priority: warning

      falcosidekick:
        enabled: true

        webui:
          enabled: true
          redis:
            storageSize: 100Mi

        config:
          existingSecret: falcosidekick-config
          slack:
            ## Minimum priority of event to use this output, order is emergency, alert, critical,
            ## error, warning, notice, informational, debug or "".
            minimumpriority: warning