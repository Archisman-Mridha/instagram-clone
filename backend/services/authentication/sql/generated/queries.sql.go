// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package sqlc_generated

import (
	"context"
)

const findUserWithUsername = `-- name: FindUserWithUsername :one
SELECT id, email, username, password, is_verified FROM users
  WHERE users.username= $1
    LIMIT 1
`

func (q *Queries) FindUserWithUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserWithUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsVerified,
	)
	return i, err
}

const findVerifiedUserWithEmail = `-- name: FindVerifiedUserWithEmail :one
SELECT id, email, username, password, is_verified FROM users
  WHERE users.email= $1 AND is_verified= TRUE
    LIMIT 1
`

func (q *Queries) FindVerifiedUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findVerifiedUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsVerified,
	)
	return i, err
}

const insertMessage = `-- name: InsertMessage :exec
INSERT INTO outbox
  (message)
    VALUES ($1)
`

func (q *Queries) InsertMessage(ctx context.Context, message []byte) error {
	_, err := q.db.ExecContext(ctx, insertMessage, message)
	return err
}

const saveUnverifiedUser = `-- name: SaveUnverifiedUser :exec
WITH deleted_row AS (
  DELETE FROM users
    WHERE users.email= $1
)
  INSERT INTO users
    (email, username, password)
      VALUES ($1, $2, $3)
`

type SaveUnverifiedUserParams struct {
	Email    string
	Username string
	Password string
}

func (q *Queries) SaveUnverifiedUser(ctx context.Context, arg SaveUnverifiedUserParams) error {
	_, err := q.db.ExecContext(ctx, saveUnverifiedUser, arg.Email, arg.Username, arg.Password)
	return err
}
