// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package sql_generated

import (
	"context"
)

const findVerifiedUserWithEmail = `-- name: FindVerifiedUserWithEmail :one
SELECT id, is_verified, name, email, username, password FROM users
  WHERE users.email= $1 AND is_verified= TRUE
    LIMIT 1
`

func (q *Queries) FindVerifiedUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findVerifiedUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IsVerified,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const saveUnverifiedUser = `-- name: SaveUnverifiedUser :one
INSERT INTO users
  (name, email)
    VALUES ($1, $2)
      RETURNING id
`

type SaveUnverifiedUserParams struct {
	Name  string
	Email string
}

func (q *Queries) SaveUnverifiedUser(ctx context.Context, arg SaveUnverifiedUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, saveUnverifiedUser, arg.Name, arg.Email)
	var id int32
	err := row.Scan(&id)
	return id, err
}
