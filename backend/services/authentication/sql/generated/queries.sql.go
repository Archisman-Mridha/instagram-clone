// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package sqlc_generated

import (
	"context"
)

const findVerifiedUserWithEmail = `-- name: FindVerifiedUserWithEmail :one
SELECT id, email, username, password, is_verified, is_username_set FROM users
  WHERE users.email= $1 AND is_verified= TRUE
    LIMIT 1
`

func (q *Queries) FindVerifiedUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findVerifiedUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsVerified,
		&i.IsUsernameSet,
	)
	return i, err
}

const insertMessage = `-- name: InsertMessage :exec
INSERT INTO outbox
  (message)
    VALUES ($1)
`

func (q *Queries) InsertMessage(ctx context.Context, message []byte) error {
	_, err := q.db.ExecContext(ctx, insertMessage, message)
	return err
}

const saveUnverifiedUser = `-- name: SaveUnverifiedUser :one
INSERT INTO users
  (email)
    VALUES ($1)
      RETURNING id
`

func (q *Queries) SaveUnverifiedUser(ctx context.Context, email string) (int32, error) {
	row := q.db.QueryRowContext(ctx, saveUnverifiedUser, email)
	var id int32
	err := row.Scan(&id)
	return id, err
}
