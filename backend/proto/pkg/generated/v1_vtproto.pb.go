// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: microservices/users/v1/v1.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceV1Client is the client API for UsersServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceV1Client interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type usersServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceV1Client(cc grpc.ClientConnInterface) UsersServiceV1Client {
	return &usersServiceV1Client{cc}
}

func (c *usersServiceV1Client) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/users.v1.UsersServiceV1/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceV1Server is the server API for UsersServiceV1 service.
// All implementations must embed UnimplementedUsersServiceV1Server
// for forward compatibility
type UsersServiceV1Server interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedUsersServiceV1Server()
}

// UnimplementedUsersServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceV1Server struct {
}

func (UnimplementedUsersServiceV1Server) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUsersServiceV1Server) mustEmbedUnimplementedUsersServiceV1Server() {}

// UnsafeUsersServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceV1Server will
// result in compilation errors.
type UnsafeUsersServiceV1Server interface {
	mustEmbedUnimplementedUsersServiceV1Server()
}

func RegisterUsersServiceV1Server(s grpc.ServiceRegistrar, srv UsersServiceV1Server) {
	s.RegisterService(&UsersServiceV1_ServiceDesc, srv)
}

func _UsersServiceV1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceV1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.UsersServiceV1/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceV1Server).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersServiceV1_ServiceDesc is the grpc.ServiceDesc for UsersServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.v1.UsersServiceV1",
	HandlerType: (*UsersServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UsersServiceV1_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservices/users/v1/v1.proto",
}
