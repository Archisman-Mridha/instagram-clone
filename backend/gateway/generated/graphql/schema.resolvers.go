package graphql_generated

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"

	"golang.org/x/sync/errgroup"

	grpc_generated "github.com/Archisman-Mridha/instagram-clone/backend/gateway/generated/grpc"
	"github.com/Archisman-Mridha/instagram-clone/backend/gateway/utils"
)

// Signup is the resolver for the Signup field.
func (r *mutationResolver) Signup(ctx context.Context, args SignupArgs) (*AuthenticationOutput, error) {
	response, err := r.UsersMicroservice.Signup(ctx, &grpc_generated.SignupRequest{
		Name:     args.Name,
		Email:    args.Email,
		Username: args.Username,
		Password: args.Password,
	})
	if err != nil {
		return nil, err
	}

	return &AuthenticationOutput{Jwt: response.Jwt}, nil
}

// Follow is the resolver for the follow field.
func (r *mutationResolver) Follow(ctx context.Context, followeeID int) (*bool, error) {
	userId, isUserAuthenticated := ctx.Value(utils.USER_ID_CONTEXT_KEY).(int32)
	if !isUserAuthenticated {
		return nil, utils.ErrUnauthenticated
	}

	_, err := r.FollowshipsMicroservice.Follow(ctx, &grpc_generated.FollowshipOperationRequest{
		FollowerId: userId,
		FolloweeId: int32(followeeID),
	})

	return nil, err
}

// Unfollow is the resolver for the unfollow field.
func (r *mutationResolver) Unfollow(ctx context.Context, followeeID int) (*bool, error) {
	userId, isUserAuthenticated := ctx.Value(utils.USER_ID_CONTEXT_KEY).(int32)
	if !isUserAuthenticated {
		return nil, utils.ErrUnauthenticated
	}

	_, err := r.FollowshipsMicroservice.Unfollow(ctx, &grpc_generated.FollowshipOperationRequest{
		FollowerId: userId,
		FolloweeId: int32(followeeID),
	})

	return nil, err
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, args CreatePostArgs) (int, error) {
	userId, isUserAuthenticated := ctx.Value(utils.USER_ID_CONTEXT_KEY).(int32)
	if !isUserAuthenticated {
		return 0, utils.ErrUnauthenticated
	}

	postID, err := r.PostsMicroservice.CreatePost(ctx, &grpc_generated.CreatePostRequest{
		OwnerId: userId,

		Description: args.Description,
	})

	return int(postID.PostId), err
}

// Signin is the resolver for the Signin field.
func (r *queryResolver) Signin(ctx context.Context, args SigninArgs) (*AuthenticationOutput, error) {
	response, err := r.UsersMicroservice.Signin(ctx, &grpc_generated.SigninRequest{
		Identifier: args.Identifier,
		Password:   args.Password,
	})
	if err != nil {
		return nil, err
	}

	return &AuthenticationOutput{Jwt: response.Jwt}, nil
}

// SearchProfiles is the resolver for the searchProfiles field.
func (r *queryResolver) SearchProfiles(ctx context.Context, args SearchProfilesArgs) (*SearchProfilesOutput, error) {
	_, isUserAuthenticated := ctx.Value(utils.USER_ID_CONTEXT_KEY).(int32)
	if !isUserAuthenticated {
		return nil, utils.ErrUnauthenticated
	}

	response, err := r.ProfilesMicroservice.SearchProfiles(ctx, &grpc_generated.SearchProfilesRequest{
		Query: args.Query,
	})
	if err != nil {
		return nil, err
	}

	profilePreviews := ProfilePreviewsToGraphQL(response.ProfilePreviews)
	return &SearchProfilesOutput{ProfilePreviews: profilePreviews}, err
}

// GetFollowers is the resolver for the getFollowers field.
func (r *queryResolver) GetFollowers(ctx context.Context, args GetFollowersArgs) ([]*ProfilePreview, error) {
	_, isUserAuthenticated := ctx.Value(utils.USER_ID_CONTEXT_KEY).(int32)
	if !isUserAuthenticated {
		return nil, utils.ErrUnauthenticated
	}

	getFollowersResponse, err := r.FollowshipsMicroservice.GetFollowers(ctx, &grpc_generated.GetFollowersRequest{
		UserId: int32(args.UserID),

		PageSize: int64(args.PageSize),
		Offset:   int64(args.Offset),
	})
	if err != nil {
		return nil, err
	}

	getProfilePreviewsResponse, err := r.ProfilesMicroservice.GetProfilePreviews(ctx, &grpc_generated.GetProfilePreviewsRequest{
		Ids: getFollowersResponse.FollowerIds,
	})
	if err != nil {
		return nil, err
	}

	profilePreviews := ProfilePreviewsToGraphQL(getProfilePreviewsResponse.ProfilePreviews)
	return profilePreviews, err
}

// GetFollowings is the resolver for the getFollowings field.
func (r *queryResolver) GetFollowings(ctx context.Context, args GetFollowingsArgs) ([]*ProfilePreview, error) {
	_, isUserAuthenticated := ctx.Value(utils.USER_ID_CONTEXT_KEY).(int32)
	if !isUserAuthenticated {
		return nil, utils.ErrUnauthenticated
	}

	getFollowingsResponse, err := r.FollowshipsMicroservice.GetFollowings(ctx, &grpc_generated.GetFollowingsRequest{
		UserId: int32(args.UserID),

		PageSize: int64(args.PageSize),
		Offset:   int64(args.Offset),
	})
	if err != nil {
		return nil, err
	}

	getProfilePreviewsResponse, err := r.ProfilesMicroservice.GetProfilePreviews(ctx, &grpc_generated.GetProfilePreviewsRequest{
		Ids: getFollowingsResponse.FolloweeIds,
	})
	if err != nil {
		return nil, err
	}

	profilePreviews := ProfilePreviewsToGraphQL(getProfilePreviewsResponse.ProfilePreviews)
	return profilePreviews, err
}

// GetProfile is the resolver for the getProfile field.
func (r *queryResolver) GetProfile(ctx context.Context, args GetProfileArgs) (*Profile, error) {
	waitGroup, _ := errgroup.WithContext(ctx)

	profile := &Profile{}

	waitGroup.Go(func() error {
		response, err := r.ProfilesMicroservice.GetProfilePreviews(ctx, &grpc_generated.GetProfilePreviewsRequest{
			Ids: []int32{int32(args.UserID)},
		})
		if err != nil {
			return err
		}

		// TODO: Handle error if len(response.ProfilePreviews) != 1

		profilePreview := response.ProfilePreviews[0]

		profile.ID = int(profilePreview.Id)
		profile.Name = profilePreview.Name
		profile.Username = profilePreview.Username

		return nil
	})

	waitGroup.Go(func() error {
		response, err := r.FollowshipsMicroservice.GetFollowshipCounts(ctx, &grpc_generated.GetFollowshipCountsRequest{
			UserId: int32(args.UserID),
		})
		if err != nil {
			return err
		}

		profile.FollowerCount = int(response.FollowerCount)
		profile.FollowingCount = int(response.FollowingCount)

		return nil
	})

	waitGroup.Go(func() error {
		response, err := r.PostsMicroservice.GetPostsOfUser(ctx, &grpc_generated.GetPostsOfUserRequest{
			OwnerId: int32(args.UserID),

			Offset:   0,
			PageSize: int64(args.MaxRecentPostCount),
		})
		if err != nil {
			return err
		}

		profile.RecentPosts = PostsToGraphQL(response.Posts)

		return nil
	})

	err := waitGroup.Wait()
	// TODO: Send the error to some central log management system.

	return profile, err
}

// GetPostsOfUser is the resolver for the getPostsOfUser field.
func (r *queryResolver) GetPostsOfUser(ctx context.Context, args GetPostsOfUserArgs) ([]*Post, error) {
	response, err := r.PostsMicroservice.GetPostsOfUser(ctx, &grpc_generated.GetPostsOfUserRequest{
		OwnerId: int32(args.UserID),

		Offset:   int64(args.Offset),
		PageSize: int64(args.PageSize),
	})
	if err != nil {
		return nil, err
	}

	return PostsToGraphQL(response.Posts), err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }