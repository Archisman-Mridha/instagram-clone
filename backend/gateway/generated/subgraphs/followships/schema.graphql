extend schema
  @link(url: "https://grafbase.com/extensions/grpc/0.1.0", import: ["@protoServices", "@protoEnums", "@protoMessages", "@grpcMethod"])
  @protoServices(
    definitions: [
      {
        name: "microservices.followships.FollowshipsService"
        methods: [
          {
            name: "Ping"
            inputType: ".google.protobuf.Empty"
            outputType: ".google.protobuf.Empty"
          }
          {
            name: "CreateFollowship"
            inputType: ".microservices.followships.FollowshipOperationRequest"
            outputType: ".google.protobuf.Empty"
          }
          {
            name: "DeleteFollowship"
            inputType: ".microservices.followships.FollowshipOperationRequest"
            outputType: ".google.protobuf.Empty"
          }
          {
            name: "DoesFollowshipExist"
            inputType: ".microservices.followships.FollowshipOperationRequest"
            outputType: ".microservices.followships.DoesFollowshipExistResponse"
          }
          {
            name: "GetFollowers"
            inputType: ".microservices.followships.GetFollowersRequest"
            outputType: ".microservices.followships.GetFollowersResponse"
          }
          {
            name: "GetFollowings"
            inputType: ".microservices.followships.GetFollowingsRequest"
            outputType: ".microservices.followships.GetFollowingsResponse"
          }
          {
            name: "GetFollowerAndFollowingCounts"
            inputType: ".microservices.followships.GetFollowerAndFollowingCountsRequest"
            outputType: ".microservices.followships.GetFollowerAndFollowingCountsResponse"
          }
        ]
      }
    ]
  )
  @protoMessages(
    definitions: [
      {
        name: ".google.protobuf.Empty"
        fields: [
        ]
      }
      {
        name: ".microservices.followships.PaginationArgs"
        fields: [
          {
            name: "offset"
            number: 1
            repeated: false
            type: "uint64"
          }
          {
            name: "page_size"
            number: 2
            repeated: false
            type: "uint64"
          }
        ]
      }
      {
        name: ".microservices.followships.FollowshipOperationRequest"
        fields: [
          {
            name: "follower_id"
            number: 1
            repeated: false
            type: "int32"
          }
          {
            name: "followee_id"
            number: 2
            repeated: false
            type: "int32"
          }
        ]
      }
      {
        name: ".microservices.followships.DoesFollowshipExistResponse"
        fields: [
          {
            name: "followship_exists"
            number: 1
            repeated: false
            type: "bool"
          }
        ]
      }
      {
        name: ".microservices.followships.GetFollowersRequest"
        fields: [
          {
            name: "user_id"
            number: 1
            repeated: false
            type: "int32"
          }
          {
            name: "pagination_args"
            number: 2
            repeated: false
            type: ".microservices.followships.PaginationArgs"
          }
        ]
      }
      {
        name: ".microservices.followships.GetFollowersResponse"
        fields: [
          {
            name: "follower_ids"
            number: 1
            repeated: true
            type: "int32"
          }
        ]
      }
      {
        name: ".microservices.followships.GetFollowingsRequest"
        fields: [
          {
            name: "user_id"
            number: 1
            repeated: false
            type: "int32"
          }
          {
            name: "pagination_args"
            number: 2
            repeated: false
            type: ".microservices.followships.PaginationArgs"
          }
        ]
      }
      {
        name: ".microservices.followships.GetFollowingsResponse"
        fields: [
          {
            name: "followee_ids"
            number: 1
            repeated: true
            type: "int32"
          }
        ]
      }
      {
        name: ".microservices.followships.GetFollowerAndFollowingCountsRequest"
        fields: [
          {
            name: "user_id"
            number: 1
            repeated: false
            type: "int32"
          }
        ]
      }
      {
        name: ".microservices.followships.GetFollowerAndFollowingCountsResponse"
        fields: [
          {
            name: "follower_count"
            number: 1
            repeated: false
            type: "int64"
          }
          {
            name: "following_count"
            number: 2
            repeated: false
            type: "int64"
          }
        ]
      }
    ]
  )

type Mutation {
  microservices_followships_FollowshipsService_Ping(input: EmptyObject): EmptyObject @grpcMethod(service: "microservices.followships.FollowshipsService", method: "Ping")
  microservices_followships_FollowshipsService_CreateFollowship(input: microservices_followships_FollowshipOperationRequestInput): EmptyObject @grpcMethod(service: "microservices.followships.FollowshipsService", method: "CreateFollowship")
  microservices_followships_FollowshipsService_DeleteFollowship(input: microservices_followships_FollowshipOperationRequestInput): EmptyObject @grpcMethod(service: "microservices.followships.FollowshipsService", method: "DeleteFollowship")
  microservices_followships_FollowshipsService_DoesFollowshipExist(input: microservices_followships_FollowshipOperationRequestInput): microservices_followships_DoesFollowshipExistResponse @grpcMethod(service: "microservices.followships.FollowshipsService", method: "DoesFollowshipExist")
  microservices_followships_FollowshipsService_GetFollowers(input: microservices_followships_GetFollowersRequestInput): microservices_followships_GetFollowersResponse @grpcMethod(service: "microservices.followships.FollowshipsService", method: "GetFollowers")
  microservices_followships_FollowshipsService_GetFollowings(input: microservices_followships_GetFollowingsRequestInput): microservices_followships_GetFollowingsResponse @grpcMethod(service: "microservices.followships.FollowshipsService", method: "GetFollowings")
  microservices_followships_FollowshipsService_GetFollowerAndFollowingCounts(input: microservices_followships_GetFollowerAndFollowingCountsRequestInput): microservices_followships_GetFollowerAndFollowingCountsResponse @grpcMethod(service: "microservices.followships.FollowshipsService", method: "GetFollowerAndFollowingCounts")
}

"64 bit signed integer" scalar I64
"64 bit unsigned integer" scalar U64

"An empty object " scalar EmptyObject

"""
A generic empty message that you can re-use to avoid defining duplicated
 empty messages in your APIs. A typical example is to use it as the request
 or the response type of an API method. For instance:

     service Foo {
       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
     }
"""
input google_protobuf_EmptyInput {
}

input microservices_followships_PaginationArgsInput {
  offset: U64
  page_size: U64
}

input microservices_followships_FollowshipOperationRequestInput {
  follower_id: Int
  followee_id: Int
}

input microservices_followships_GetFollowersRequestInput {
  user_id: Int
  pagination_args: microservices_followships_PaginationArgsInput
}

input microservices_followships_GetFollowingsRequestInput {
  user_id: Int
  pagination_args: microservices_followships_PaginationArgsInput
}

input microservices_followships_GetFollowerAndFollowingCountsRequestInput {
  user_id: Int
}

"An empty object " scalar EmptyObject

"""
A generic empty message that you can re-use to avoid defining duplicated
 empty messages in your APIs. A typical example is to use it as the request
 or the response type of an API method. For instance:

     service Foo {
       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
     }
"""
type google_protobuf_Empty {
}

type microservices_followships_DoesFollowshipExistResponse {
  followship_exists: Boolean
}

type microservices_followships_GetFollowersResponse {
  follower_ids: [Int!]
}

type microservices_followships_GetFollowingsResponse {
  followee_ids: [Int!]
}

type microservices_followships_GetFollowerAndFollowingCountsResponse {
  follower_count: I64
  following_count: I64
}
