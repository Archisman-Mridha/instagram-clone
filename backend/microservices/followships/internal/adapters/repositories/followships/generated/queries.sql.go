// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package generated

import (
	"context"
)

const createFollowship = `-- name: CreateFollowship :exec
INSERT
INTO
  followships (
    follower_id,
    followee_id
  )
VALUES
  (
    $1,
    $2
  )
`

type CreateFollowshipParams struct {
	FollowerID int32
	FolloweeID int32
}

func (q *Queries) CreateFollowship(ctx context.Context, arg *CreateFollowshipParams) error {
	_, err := q.db.ExecContext(ctx, createFollowship, arg.FollowerID, arg.FolloweeID)
	return err
}

const deleteFollowship = `-- name: DeleteFollowship :exec
DELETE
FROM
  followships
WHERE
  follower_id = $1 AND
  followee_id = $2
`

type DeleteFollowshipParams struct {
	FollowerID int32
	FolloweeID int32
}

func (q *Queries) DeleteFollowship(ctx context.Context, arg *DeleteFollowshipParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollowship, arg.FollowerID, arg.FolloweeID)
	return err
}

const getFollowerAndFollowingCounts = `-- name: GetFollowerAndFollowingCounts :one
SELECT
	(SELECT COUNT(*) FROM followships WHERE followships.followee_id = $1) AS follower_count,
	(SELECT COUNT(*) FROM followships WHERE followships.follower_id = $1) AS following_count
`

type GetFollowerAndFollowingCountsRow struct {
	FollowerCount  int64
	FollowingCount int64
}

func (q *Queries) GetFollowerAndFollowingCounts(ctx context.Context, followeeID int32) (*GetFollowerAndFollowingCountsRow, error) {
	row := q.db.QueryRowContext(ctx, getFollowerAndFollowingCounts, followeeID)
	var i GetFollowerAndFollowingCountsRow
	err := row.Scan(&i.FollowerCount, &i.FollowingCount)
	return &i, err
}

const getFollowers = `-- name: GetFollowers :many
SELECT
  follower_id
FROM
  followships
WHERE
  followee_id = $1
LIMIT $2
OFFSET $3
`

type GetFollowersParams struct {
	FolloweeID int32
	Limit      int32
	Offset     int32
}

func (q *Queries) GetFollowers(ctx context.Context, arg *GetFollowersParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, arg.FolloweeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var follower_id int32
		if err := rows.Scan(&follower_id); err != nil {
			return nil, err
		}
		items = append(items, follower_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowings = `-- name: GetFollowings :many
SELECT
  followee_id
FROM
  followships
WHERE
  follower_id = $1
LIMIT $2
OFFSET $3
`

type GetFollowingsParams struct {
	FollowerID int32
	Limit      int32
	Offset     int32
}

func (q *Queries) GetFollowings(ctx context.Context, arg *GetFollowingsParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getFollowings, arg.FollowerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var followee_id int32
		if err := rows.Scan(&followee_id); err != nil {
			return nil, err
		}
		items = append(items, followee_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowship = `-- name: GetFollowship :exec
SELECT 1
FROM
  followships
WHERE
  follower_id = $1 AND
  followee_id = $2
LIMIT 1
`

type GetFollowshipParams struct {
	FollowerID int32
	FolloweeID int32
}

func (q *Queries) GetFollowship(ctx context.Context, arg *GetFollowshipParams) error {
	_, err := q.db.ExecContext(ctx, getFollowship, arg.FollowerID, arg.FolloweeID)
	return err
}
