// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: microservices/followships/cmd/server/grpc/api/proto/service.proto

package generated

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FollowshipOperationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FollowshipOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowshipOperationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowshipOperationRequestMultiError, or nil if none found.
func (m *FollowshipOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowshipOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FollowerId

	// no validation rules for FolloweeId

	if len(errors) > 0 {
		return FollowshipOperationRequestMultiError(errors)
	}

	return nil
}

// FollowshipOperationRequestMultiError is an error wrapping multiple
// validation errors returned by FollowshipOperationRequest.ValidateAll() if
// the designated constraints aren't met.
type FollowshipOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowshipOperationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowshipOperationRequestMultiError) AllErrors() []error { return m }

// FollowshipOperationRequestValidationError is the validation error returned
// by FollowshipOperationRequest.Validate if the designated constraints aren't met.
type FollowshipOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowshipOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowshipOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowshipOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowshipOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowshipOperationRequestValidationError) ErrorName() string {
	return "FollowshipOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FollowshipOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowshipOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowshipOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowshipOperationRequestValidationError{}

// Validate checks the field values on GetFollowersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowersRequestMultiError, or nil if none found.
func (m *GetFollowersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PageSize

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetFollowersRequestMultiError(errors)
	}

	return nil
}

// GetFollowersRequestMultiError is an error wrapping multiple validation
// errors returned by GetFollowersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFollowersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowersRequestMultiError) AllErrors() []error { return m }

// GetFollowersRequestValidationError is the validation error returned by
// GetFollowersRequest.Validate if the designated constraints aren't met.
type GetFollowersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowersRequestValidationError) ErrorName() string {
	return "GetFollowersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowersRequestValidationError{}

// Validate checks the field values on GetFollowersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowersResponseMultiError, or nil if none found.
func (m *GetFollowersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFollowersResponseMultiError(errors)
	}

	return nil
}

// GetFollowersResponseMultiError is an error wrapping multiple validation
// errors returned by GetFollowersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFollowersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowersResponseMultiError) AllErrors() []error { return m }

// GetFollowersResponseValidationError is the validation error returned by
// GetFollowersResponse.Validate if the designated constraints aren't met.
type GetFollowersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowersResponseValidationError) ErrorName() string {
	return "GetFollowersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowersResponseValidationError{}

// Validate checks the field values on GetFollowingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowingsRequestMultiError, or nil if none found.
func (m *GetFollowingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PageSize

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetFollowingsRequestMultiError(errors)
	}

	return nil
}

// GetFollowingsRequestMultiError is an error wrapping multiple validation
// errors returned by GetFollowingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFollowingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowingsRequestMultiError) AllErrors() []error { return m }

// GetFollowingsRequestValidationError is the validation error returned by
// GetFollowingsRequest.Validate if the designated constraints aren't met.
type GetFollowingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowingsRequestValidationError) ErrorName() string {
	return "GetFollowingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowingsRequestValidationError{}

// Validate checks the field values on GetFollowingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowingsResponseMultiError, or nil if none found.
func (m *GetFollowingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFollowingsResponseMultiError(errors)
	}

	return nil
}

// GetFollowingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetFollowingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFollowingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowingsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowingsResponseMultiError) AllErrors() []error { return m }

// GetFollowingsResponseValidationError is the validation error returned by
// GetFollowingsResponse.Validate if the designated constraints aren't met.
type GetFollowingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowingsResponseValidationError) ErrorName() string {
	return "GetFollowingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowingsResponseValidationError{}

// Validate checks the field values on GetFollowshipCountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowshipCountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowshipCountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowshipCountsRequestMultiError, or nil if none found.
func (m *GetFollowshipCountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowshipCountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetFollowshipCountsRequestMultiError(errors)
	}

	return nil
}

// GetFollowshipCountsRequestMultiError is an error wrapping multiple
// validation errors returned by GetFollowshipCountsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFollowshipCountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowshipCountsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowshipCountsRequestMultiError) AllErrors() []error { return m }

// GetFollowshipCountsRequestValidationError is the validation error returned
// by GetFollowshipCountsRequest.Validate if the designated constraints aren't met.
type GetFollowshipCountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowshipCountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowshipCountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowshipCountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowshipCountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowshipCountsRequestValidationError) ErrorName() string {
	return "GetFollowshipCountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowshipCountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowshipCountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowshipCountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowshipCountsRequestValidationError{}

// Validate checks the field values on GetFollowshipCountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowshipCountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowshipCountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowshipCountsResponseMultiError, or nil if none found.
func (m *GetFollowshipCountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowshipCountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FollowerCount

	// no validation rules for FollowingCount

	if len(errors) > 0 {
		return GetFollowshipCountsResponseMultiError(errors)
	}

	return nil
}

// GetFollowshipCountsResponseMultiError is an error wrapping multiple
// validation errors returned by GetFollowshipCountsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetFollowshipCountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowshipCountsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowshipCountsResponseMultiError) AllErrors() []error { return m }

// GetFollowshipCountsResponseValidationError is the validation error returned
// by GetFollowshipCountsResponse.Validate if the designated constraints
// aren't met.
type GetFollowshipCountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowshipCountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowshipCountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowshipCountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowshipCountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowshipCountsResponseValidationError) ErrorName() string {
	return "GetFollowshipCountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowshipCountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowshipCountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowshipCountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowshipCountsResponseValidationError{}

// Validate checks the field values on DoesFollowshipExistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DoesFollowshipExistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoesFollowshipExistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DoesFollowshipExistRequestMultiError, or nil if none found.
func (m *DoesFollowshipExistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DoesFollowshipExistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FollowerId

	// no validation rules for FolloweeId

	if len(errors) > 0 {
		return DoesFollowshipExistRequestMultiError(errors)
	}

	return nil
}

// DoesFollowshipExistRequestMultiError is an error wrapping multiple
// validation errors returned by DoesFollowshipExistRequest.ValidateAll() if
// the designated constraints aren't met.
type DoesFollowshipExistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DoesFollowshipExistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DoesFollowshipExistRequestMultiError) AllErrors() []error { return m }

// DoesFollowshipExistRequestValidationError is the validation error returned
// by DoesFollowshipExistRequest.Validate if the designated constraints aren't met.
type DoesFollowshipExistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoesFollowshipExistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoesFollowshipExistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoesFollowshipExistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoesFollowshipExistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoesFollowshipExistRequestValidationError) ErrorName() string {
	return "DoesFollowshipExistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DoesFollowshipExistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoesFollowshipExistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoesFollowshipExistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoesFollowshipExistRequestValidationError{}

// Validate checks the field values on DoesFollowshipExistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DoesFollowshipExistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoesFollowshipExistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DoesFollowshipExistResponseMultiError, or nil if none found.
func (m *DoesFollowshipExistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DoesFollowshipExistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return DoesFollowshipExistResponseMultiError(errors)
	}

	return nil
}

// DoesFollowshipExistResponseMultiError is an error wrapping multiple
// validation errors returned by DoesFollowshipExistResponse.ValidateAll() if
// the designated constraints aren't met.
type DoesFollowshipExistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DoesFollowshipExistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DoesFollowshipExistResponseMultiError) AllErrors() []error { return m }

// DoesFollowshipExistResponseValidationError is the validation error returned
// by DoesFollowshipExistResponse.Validate if the designated constraints
// aren't met.
type DoesFollowshipExistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoesFollowshipExistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoesFollowshipExistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoesFollowshipExistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoesFollowshipExistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoesFollowshipExistResponseValidationError) ErrorName() string {
	return "DoesFollowshipExistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DoesFollowshipExistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoesFollowshipExistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoesFollowshipExistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoesFollowshipExistResponseValidationError{}
