// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package generated

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
  (name, email, username, password)
  VALUES ($1, $2, $3, $4)
  RETURNING id
`

type CreateUserParams struct {
	Name     string
	Email    string
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.Password,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, password FROM users
  WHERE email= $1
  LIMIT 1
`

type FindUserByEmailRow struct {
	ID       int32
	Password string
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id FROM users
  WHERE id= $1
  LIMIT 1
`

func (q *Queries) FindUserByID(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	err := row.Scan(&id)
	return id, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, password FROM users
  WHERE username= $1
  LIMIT 1
`

type FindUserByUsernameRow struct {
	ID       int32
	Password string
}

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (FindUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, username)
	var i FindUserByUsernameRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}
