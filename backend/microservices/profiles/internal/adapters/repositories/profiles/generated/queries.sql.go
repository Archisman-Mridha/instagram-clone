// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package generated

import (
	"context"

	"github.com/lib/pq"
)

const createProfile = `-- name: CreateProfile :exec
INSERT INTO profiles
  (id, name, username)
  VALUES ($1, $2, $3)
`

type CreateProfileParams struct {
	ID       int32
	Name     string
	Username string
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) error {
	_, err := q.db.ExecContext(ctx, createProfile, arg.ID, arg.Name, arg.Username)
	return err
}

const getProfilePreviews = `-- name: GetProfilePreviews :many
SELECT id, name, username FROM profiles
  WHERE id= ANY($1::int[])
`

type GetProfilePreviewsRow struct {
	ID       int32
	Name     string
	Username string
}

func (q *Queries) GetProfilePreviews(ctx context.Context, dollar_1 []int32) ([]GetProfilePreviewsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfilePreviews, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProfilePreviewsRow
	for rows.Next() {
		var i GetProfilePreviewsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
