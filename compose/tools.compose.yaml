services:
  postgres:
    container_name: postgres
    image: postgres:alpine
    hostname: postgres
    environment:
      - POSTGRES_USER=default
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=instagram_clone
    ports:
      - 5432:5432
    command:
      [
        -c,
        wal_level=logical,
        -c,
        max_replication_slots=4,
        -c,
        max_wal_senders=4,
      ]

  meilisearch:
    image: getmeili/meilisearch:v1.7
    container_name: meilisearch
    ports:
      - 7700:7700

  redpanda-node-0:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.12
    container_name: redpanda-node-0
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # (1) Use the internal addresses to connect to the Redpanda brokers' from inside the same
      #     Docker network.
      # (2) Use the external addresses to connect to the Redpanda brokers' from outside the Docker
      #     network.
      - --advertise-kafka-addr internal://redpanda-node-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-node-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-node-0:33145
      - --advertise-rpc-addr redpanda-node-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644

  # Debezium is a set of distributed services to capture changes in your databases so that your
  # applications can see those changes and respond to them. Debezium is built on top of Apache
  # Kafka and provides a set of Kafka Connect compatible connectors. Connectors record the history
  # of data changes in the DBMS by detecting changes as they occur, and streaming a record of each
  # change event to a Kafka topic. Consuming applications can then read the resulting event records
  # from the Kafka topic.
  #
  # The first time it connects to a PostgreSQL server or cluster, the connector takes a consistent
  # snapshot of all schemas. After that snapshot is complete, the connector continuously captures
  # row-level changes that insert, update, and delete database content and that were committed to a
  # PostgreSQL database.
  #
  # The PostgreSQL connector contains two main parts that work together to read and process
  # database changes:
  #
  # (1). A logical decoding output plug-in. You might need to install the output plug-in that you
  #    choose to use. You must configure a replication slot that uses your chosen output plug-in
  #    before running the PostgreSQL server. The plug-in can be one of the following:
  #
  #    DECODERBUFS - based on Protobuf and maintained by the Debezium community.
  #
  #    PGOUTPUT - the standard logical decoding output plug-in in PostgreSQL 10+. It is maintained
  #    by the PostgreSQL community, and used by PostgreSQL itself for logical replication. This
  #    plug-in is always present so no additional libraries need to be installed.
  #
  # (2). Java code (the actual Kafka Connect connector) that reads the changes produced by the
  #    chosen logical decoding output plug-in. It uses PostgreSQLâ€™s streaming replication protocol
  #    by means of the PostgreSQL JDBC driver.
  debezium:
    container_name: debezium
    image: debezium/connect:2.4
    environment:
      BOOTSTRAP_SERVERS: redpanda-node-0:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_configs
      STATUS_STORAGE_TOPIC: debezium_statuses
      OFFSET_STORAGE_TOPIC: debezium_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: "true"
    ports:
      - 8083:8083
    depends_on:
      - postgres-migrate
      - redpanda-node-0

  redis:
    container_name: redis
    image: bitnami/redis:latest
    environment:
      - REDIS_PASSWORD=pass
    ports:
      - 6379:6379
